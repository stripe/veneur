// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sinks/grpsink/grpc_sink.proto

/*
	Package grpsink is a generated protocol buffer package.

	It is generated from these files:
		sinks/grpsink/grpc_sink.proto

	It has these top-level messages:
		SpanResponse
*/
package grpsink

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import ssf "github.com/stripe/veneur/ssf"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SpanResponse struct {
	Greeting string `protobuf:"bytes,1,opt,name=greeting,proto3" json:"greeting,omitempty"`
}

func (m *SpanResponse) Reset()                    { *m = SpanResponse{} }
func (m *SpanResponse) String() string            { return proto.CompactTextString(m) }
func (*SpanResponse) ProtoMessage()               {}
func (*SpanResponse) Descriptor() ([]byte, []int) { return fileDescriptorGrpcSink, []int{0} }

func (m *SpanResponse) GetGreeting() string {
	if m != nil {
		return m.Greeting
	}
	return ""
}

func init() {
	proto.RegisterType((*SpanResponse)(nil), "grpsink.SpanResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SpanSink service

type SpanSinkClient interface {
	SendSpans(ctx context.Context, opts ...grpc.CallOption) (SpanSink_SendSpansClient, error)
}

type spanSinkClient struct {
	cc *grpc.ClientConn
}

func NewSpanSinkClient(cc *grpc.ClientConn) SpanSinkClient {
	return &spanSinkClient{cc}
}

func (c *spanSinkClient) SendSpans(ctx context.Context, opts ...grpc.CallOption) (SpanSink_SendSpansClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SpanSink_serviceDesc.Streams[0], c.cc, "/grpsink.SpanSink/SendSpans", opts...)
	if err != nil {
		return nil, err
	}
	x := &spanSinkSendSpansClient{stream}
	return x, nil
}

type SpanSink_SendSpansClient interface {
	Send(*ssf.SSFSpan) error
	CloseAndRecv() (*SpanResponse, error)
	grpc.ClientStream
}

type spanSinkSendSpansClient struct {
	grpc.ClientStream
}

func (x *spanSinkSendSpansClient) Send(m *ssf.SSFSpan) error {
	return x.ClientStream.SendMsg(m)
}

func (x *spanSinkSendSpansClient) CloseAndRecv() (*SpanResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SpanResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SpanSink service

type SpanSinkServer interface {
	SendSpans(SpanSink_SendSpansServer) error
}

func RegisterSpanSinkServer(s *grpc.Server, srv SpanSinkServer) {
	s.RegisterService(&_SpanSink_serviceDesc, srv)
}

func _SpanSink_SendSpans_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SpanSinkServer).SendSpans(&spanSinkSendSpansServer{stream})
}

type SpanSink_SendSpansServer interface {
	SendAndClose(*SpanResponse) error
	Recv() (*ssf.SSFSpan, error)
	grpc.ServerStream
}

type spanSinkSendSpansServer struct {
	grpc.ServerStream
}

func (x *spanSinkSendSpansServer) SendAndClose(m *SpanResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *spanSinkSendSpansServer) Recv() (*ssf.SSFSpan, error) {
	m := new(ssf.SSFSpan)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SpanSink_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpsink.SpanSink",
	HandlerType: (*SpanSinkServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendSpans",
			Handler:       _SpanSink_SendSpans_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "sinks/grpsink/grpc_sink.proto",
}

func (m *SpanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpanResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Greeting) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGrpcSink(dAtA, i, uint64(len(m.Greeting)))
		i += copy(dAtA[i:], m.Greeting)
	}
	return i, nil
}

func encodeVarintGrpcSink(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SpanResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Greeting)
	if l > 0 {
		n += 1 + l + sovGrpcSink(uint64(l))
	}
	return n
}

func sovGrpcSink(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGrpcSink(x uint64) (n int) {
	return sovGrpcSink(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SpanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpcSink
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Greeting", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcSink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpcSink
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Greeting = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpcSink(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpcSink
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGrpcSink(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGrpcSink
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrpcSink
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrpcSink
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGrpcSink
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGrpcSink
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGrpcSink(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGrpcSink = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGrpcSink   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("sinks/grpsink/grpc_sink.proto", fileDescriptorGrpcSink) }

var fileDescriptorGrpcSink = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2d, 0xce, 0xcc, 0xcb,
	0x2e, 0xd6, 0x4f, 0x2f, 0x2a, 0x00, 0x31, 0x40, 0x74, 0x72, 0x3c, 0x88, 0xa5, 0x57, 0x50, 0x94,
	0x5f, 0x92, 0x2f, 0xc4, 0x0e, 0x95, 0x90, 0x12, 0x28, 0x2e, 0x4e, 0xd3, 0x2f, 0x4e, 0xcc, 0x2d,
	0xc8, 0x49, 0x85, 0x48, 0x29, 0x69, 0x71, 0xf1, 0x04, 0x17, 0x24, 0xe6, 0x05, 0xa5, 0x16, 0x17,
	0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x49, 0x71, 0x71, 0xa4, 0x17, 0xa5, 0xa6, 0x96, 0x64, 0xe6, 0xa5,
	0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xf9, 0x46, 0x0e, 0x5c, 0x1c, 0x20, 0xb5, 0xc1,
	0x99, 0x79, 0xd9, 0x42, 0x26, 0x5c, 0x9c, 0xc1, 0xa9, 0x79, 0x29, 0x20, 0x7e, 0xb1, 0x10, 0x8f,
	0x5e, 0x71, 0x71, 0x9a, 0x5e, 0x70, 0xb0, 0x1b, 0x88, 0x2b, 0x25, 0xaa, 0x07, 0xb5, 0x4e, 0x0f,
	0xd9, 0x64, 0x25, 0x06, 0x0d, 0x46, 0x27, 0x81, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63,
	0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc6, 0x63, 0x39, 0x86, 0x24, 0x36, 0xb0, 0x33, 0x8c, 0x01, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x03, 0x45, 0x35, 0xd2, 0xc2, 0x00, 0x00, 0x00,
}
