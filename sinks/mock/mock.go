// Code generated by MockGen. DO NOT EDIT.
// Source: sinks/sinks.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	samplers "github.com/stripe/veneur/v14/samplers"
	ssf "github.com/stripe/veneur/v14/ssf"
	trace "github.com/stripe/veneur/v14/trace"
)

// MockMetricSink is a mock of MetricSink interface.
type MockMetricSink struct {
	ctrl     *gomock.Controller
	recorder *MockMetricSinkMockRecorder
}

// MockMetricSinkMockRecorder is the mock recorder for MockMetricSink.
type MockMetricSinkMockRecorder struct {
	mock *MockMetricSink
}

// NewMockMetricSink creates a new mock instance.
func NewMockMetricSink(ctrl *gomock.Controller) *MockMetricSink {
	mock := &MockMetricSink{ctrl: ctrl}
	mock.recorder = &MockMetricSinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricSink) EXPECT() *MockMetricSinkMockRecorder {
	return m.recorder
}

// Flush mocks base method.
func (m *MockMetricSink) Flush(arg0 context.Context, arg1 []samplers.InterMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockMetricSinkMockRecorder) Flush(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockMetricSink)(nil).Flush), arg0, arg1)
}

// FlushOtherSamples mocks base method.
func (m *MockMetricSink) FlushOtherSamples(ctx context.Context, samples []ssf.SSFSample) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FlushOtherSamples", ctx, samples)
}

// FlushOtherSamples indicates an expected call of FlushOtherSamples.
func (mr *MockMetricSinkMockRecorder) FlushOtherSamples(ctx, samples interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushOtherSamples", reflect.TypeOf((*MockMetricSink)(nil).FlushOtherSamples), ctx, samples)
}

// Name mocks base method.
func (m *MockMetricSink) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Kind is hardcoded to "mock".
func (m *MockMetricSink) Name() string {
	return "mock"
}

// Name indicates an expected call of Name.
func (mr *MockMetricSinkMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockMetricSink)(nil).Name))
}

// Start mocks base method.
func (m *MockMetricSink) Start(traceClient *trace.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", traceClient)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockMetricSinkMockRecorder) Start(traceClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMetricSink)(nil).Start), traceClient)
}

// MockSpanSink is a mock of SpanSink interface.
type MockSpanSink struct {
	ctrl     *gomock.Controller
	recorder *MockSpanSinkMockRecorder
}

// MockSpanSinkMockRecorder is the mock recorder for MockSpanSink.
type MockSpanSinkMockRecorder struct {
	mock *MockSpanSink
}

// NewMockSpanSink creates a new mock instance.
func NewMockSpanSink(ctrl *gomock.Controller) *MockSpanSink {
	mock := &MockSpanSink{ctrl: ctrl}
	mock.recorder = &MockSpanSinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpanSink) EXPECT() *MockSpanSinkMockRecorder {
	return m.recorder
}

// Flush mocks base method.
func (m *MockSpanSink) Flush() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Flush")
}

// Flush indicates an expected call of Flush.
func (mr *MockSpanSinkMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockSpanSink)(nil).Flush))
}

// Ingest mocks base method.
func (m *MockSpanSink) Ingest(arg0 *ssf.SSFSpan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ingest", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ingest indicates an expected call of Ingest.
func (mr *MockSpanSinkMockRecorder) Ingest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ingest", reflect.TypeOf((*MockSpanSink)(nil).Ingest), arg0)
}

// Name mocks base method.
func (m *MockSpanSink) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockSpanSinkMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSpanSink)(nil).Name))
}

// Start mocks base method.
func (m *MockSpanSink) Start(arg0 *trace.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockSpanSinkMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSpanSink)(nil).Start), arg0)
}
