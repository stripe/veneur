// Code generated by MockGen. DO NOT EDIT.
// Source: forwardrpc/forward.pb.go

// Package forwardrpc is a generated GoMock package.
package forwardrpc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	metricpb "github.com/stripe/veneur/v14/samplers/metricpb"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockForwardClient is a mock of ForwardClient interface.
type MockForwardClient struct {
	ctrl     *gomock.Controller
	recorder *MockForwardClientMockRecorder
}

// MockForwardClientMockRecorder is the mock recorder for MockForwardClient.
type MockForwardClientMockRecorder struct {
	mock *MockForwardClient
}

// NewMockForwardClient creates a new mock instance.
func NewMockForwardClient(ctrl *gomock.Controller) *MockForwardClient {
	mock := &MockForwardClient{ctrl: ctrl}
	mock.recorder = &MockForwardClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForwardClient) EXPECT() *MockForwardClientMockRecorder {
	return m.recorder
}

// SendMetrics mocks base method.
func (m *MockForwardClient) SendMetrics(ctx context.Context, in *MetricList, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMetrics", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMetrics indicates an expected call of SendMetrics.
func (mr *MockForwardClientMockRecorder) SendMetrics(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMetrics", reflect.TypeOf((*MockForwardClient)(nil).SendMetrics), varargs...)
}

// SendMetricsV2 mocks base method.
func (m *MockForwardClient) SendMetricsV2(ctx context.Context, opts ...grpc.CallOption) (Forward_SendMetricsV2Client, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMetricsV2", varargs...)
	ret0, _ := ret[0].(Forward_SendMetricsV2Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMetricsV2 indicates an expected call of SendMetricsV2.
func (mr *MockForwardClientMockRecorder) SendMetricsV2(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMetricsV2", reflect.TypeOf((*MockForwardClient)(nil).SendMetricsV2), varargs...)
}

// MockForward_SendMetricsV2Client is a mock of Forward_SendMetricsV2Client interface.
type MockForward_SendMetricsV2Client struct {
	ctrl     *gomock.Controller
	recorder *MockForward_SendMetricsV2ClientMockRecorder
}

// MockForward_SendMetricsV2ClientMockRecorder is the mock recorder for MockForward_SendMetricsV2Client.
type MockForward_SendMetricsV2ClientMockRecorder struct {
	mock *MockForward_SendMetricsV2Client
}

// NewMockForward_SendMetricsV2Client creates a new mock instance.
func NewMockForward_SendMetricsV2Client(ctrl *gomock.Controller) *MockForward_SendMetricsV2Client {
	mock := &MockForward_SendMetricsV2Client{ctrl: ctrl}
	mock.recorder = &MockForward_SendMetricsV2ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForward_SendMetricsV2Client) EXPECT() *MockForward_SendMetricsV2ClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockForward_SendMetricsV2Client) CloseAndRecv() (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockForward_SendMetricsV2ClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockForward_SendMetricsV2Client)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockForward_SendMetricsV2Client) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockForward_SendMetricsV2ClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockForward_SendMetricsV2Client)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockForward_SendMetricsV2Client) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockForward_SendMetricsV2ClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockForward_SendMetricsV2Client)(nil).Context))
}

// Header mocks base method.
func (m *MockForward_SendMetricsV2Client) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockForward_SendMetricsV2ClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockForward_SendMetricsV2Client)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockForward_SendMetricsV2Client) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockForward_SendMetricsV2ClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockForward_SendMetricsV2Client)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockForward_SendMetricsV2Client) Send(arg0 *metricpb.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockForward_SendMetricsV2ClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockForward_SendMetricsV2Client)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockForward_SendMetricsV2Client) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockForward_SendMetricsV2ClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockForward_SendMetricsV2Client)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockForward_SendMetricsV2Client) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockForward_SendMetricsV2ClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockForward_SendMetricsV2Client)(nil).Trailer))
}

// MockForwardServer is a mock of ForwardServer interface.
type MockForwardServer struct {
	ctrl     *gomock.Controller
	recorder *MockForwardServerMockRecorder
}

// MockForwardServerMockRecorder is the mock recorder for MockForwardServer.
type MockForwardServerMockRecorder struct {
	mock *MockForwardServer
}

// NewMockForwardServer creates a new mock instance.
func NewMockForwardServer(ctrl *gomock.Controller) *MockForwardServer {
	mock := &MockForwardServer{ctrl: ctrl}
	mock.recorder = &MockForwardServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForwardServer) EXPECT() *MockForwardServerMockRecorder {
	return m.recorder
}

// SendMetrics mocks base method.
func (m *MockForwardServer) SendMetrics(arg0 context.Context, arg1 *MetricList) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMetrics", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMetrics indicates an expected call of SendMetrics.
func (mr *MockForwardServerMockRecorder) SendMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMetrics", reflect.TypeOf((*MockForwardServer)(nil).SendMetrics), arg0, arg1)
}

// SendMetricsV2 mocks base method.
func (m *MockForwardServer) SendMetricsV2(arg0 Forward_SendMetricsV2Server) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMetricsV2", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMetricsV2 indicates an expected call of SendMetricsV2.
func (mr *MockForwardServerMockRecorder) SendMetricsV2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMetricsV2", reflect.TypeOf((*MockForwardServer)(nil).SendMetricsV2), arg0)
}

// MockForward_SendMetricsV2Server is a mock of Forward_SendMetricsV2Server interface.
type MockForward_SendMetricsV2Server struct {
	ctrl     *gomock.Controller
	recorder *MockForward_SendMetricsV2ServerMockRecorder
}

// MockForward_SendMetricsV2ServerMockRecorder is the mock recorder for MockForward_SendMetricsV2Server.
type MockForward_SendMetricsV2ServerMockRecorder struct {
	mock *MockForward_SendMetricsV2Server
}

// NewMockForward_SendMetricsV2Server creates a new mock instance.
func NewMockForward_SendMetricsV2Server(ctrl *gomock.Controller) *MockForward_SendMetricsV2Server {
	mock := &MockForward_SendMetricsV2Server{ctrl: ctrl}
	mock.recorder = &MockForward_SendMetricsV2ServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForward_SendMetricsV2Server) EXPECT() *MockForward_SendMetricsV2ServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockForward_SendMetricsV2Server) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockForward_SendMetricsV2ServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockForward_SendMetricsV2Server)(nil).Context))
}

// Recv mocks base method.
func (m *MockForward_SendMetricsV2Server) Recv() (*metricpb.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*metricpb.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockForward_SendMetricsV2ServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockForward_SendMetricsV2Server)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockForward_SendMetricsV2Server) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockForward_SendMetricsV2ServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockForward_SendMetricsV2Server)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockForward_SendMetricsV2Server) SendAndClose(arg0 *empty.Empty) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockForward_SendMetricsV2ServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockForward_SendMetricsV2Server)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockForward_SendMetricsV2Server) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockForward_SendMetricsV2ServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockForward_SendMetricsV2Server)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockForward_SendMetricsV2Server) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockForward_SendMetricsV2ServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockForward_SendMetricsV2Server)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockForward_SendMetricsV2Server) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockForward_SendMetricsV2ServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockForward_SendMetricsV2Server)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockForward_SendMetricsV2Server) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockForward_SendMetricsV2ServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockForward_SendMetricsV2Server)(nil).SetTrailer), arg0)
}
