// Code generated by MockGen. DO NOT EDIT.
// Source: sources/sources.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	samplers "github.com/stripe/veneur/v14/samplers"
	sources "github.com/stripe/veneur/v14/sources"
)

// MockSourceConfig is a mock of SourceConfig interface.
type MockSourceConfig struct {
	ctrl     *gomock.Controller
	recorder *MockSourceConfigMockRecorder
}

// MockSourceConfigMockRecorder is the mock recorder for MockSourceConfig.
type MockSourceConfigMockRecorder struct {
	mock *MockSourceConfig
}

// NewMockSourceConfig creates a new mock instance.
func NewMockSourceConfig(ctrl *gomock.Controller) *MockSourceConfig {
	mock := &MockSourceConfig{ctrl: ctrl}
	mock.recorder = &MockSourceConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourceConfig) EXPECT() *MockSourceConfigMockRecorder {
	return m.recorder
}

// MockSource is a mock of Source interface.
type MockSource struct {
	ctrl     *gomock.Controller
	recorder *MockSourceMockRecorder
}

// MockSourceMockRecorder is the mock recorder for MockSource.
type MockSourceMockRecorder struct {
	mock *MockSource
}

// NewMockSource creates a new mock instance.
func NewMockSource(ctrl *gomock.Controller) *MockSource {
	mock := &MockSource{ctrl: ctrl}
	mock.recorder = &MockSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSource) EXPECT() *MockSourceMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockSource) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockSourceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSource)(nil).Name))
}

// Start mocks base method.
func (m *MockSource) Start(ingest sources.Ingest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ingest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockSourceMockRecorder) Start(ingest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSource)(nil).Start), ingest)
}

// Stop mocks base method.
func (m *MockSource) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockSourceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSource)(nil).Stop))
}

// MockIngest is a mock of Ingest interface.
type MockIngest struct {
	ctrl     *gomock.Controller
	recorder *MockIngestMockRecorder
}

// MockIngestMockRecorder is the mock recorder for MockIngest.
type MockIngestMockRecorder struct {
	mock *MockIngest
}

// NewMockIngest creates a new mock instance.
func NewMockIngest(ctrl *gomock.Controller) *MockIngest {
	mock := &MockIngest{ctrl: ctrl}
	mock.recorder = &MockIngestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIngest) EXPECT() *MockIngestMockRecorder {
	return m.recorder
}

// IngestMetric mocks base method.
func (m *MockIngest) IngestMetric(metric *samplers.UDPMetric) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IngestMetric", metric)
}

// IngestMetric indicates an expected call of IngestMetric.
func (mr *MockIngestMockRecorder) IngestMetric(metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestMetric", reflect.TypeOf((*MockIngest)(nil).IngestMetric), metric)
}
