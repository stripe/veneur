syntax = "proto3";

package ssf;

message SSFSample {
  enum Metric {
      COUNTER = 0;
      GAUGE = 1;
      HISTOGRAM = 2;
      SET = 3;
      STATUS = 4;
  }
  enum Status {
      OK = 0;
      WARNING = 1;
      CRITICAL = 2;
      UNKNOWN = 3;
  }

  // The underlying type of the metric
  Metric metric = 1;

  // no spaces, but . is allowed
  // e.g.: veneur.bar.baz
  string name = 2;
  float value = 3;
  int64 timestamp = 4;
  string message = 5;
  Status status = 6;
  float sample_rate = 7;
  map<string, string> tags = 8;
  string unit = 9;
}

message SSFSpan {
  reserved 9;

  int32 version = 1;
  // the trace_id is the (span) id of the root span
  int64 trace_id = 2;
  // the id for this span
  int64 id = 3;
  // the (span) id of the direct parent,
  // if this span is not a root span
  int64 parent_id = 4;

  int64 start_timestamp = 5;
  int64 end_timestamp = 6;

  // This flag being true signals that this span was an error. That definition
  // of error is not implicitly fatal, as a span may error but be fixed by
  // a subsequent retry, etc.
  bool error = 7;

  // The name of the service
  // e.g. "veneur"
  string service = 8;

  repeated SSFSample metrics = 10;

  // Tags are name value pairs that describe a facet of the span. They apply to
  // the *entire* span as opposed to logs which apply to a specific time in
  // the span.
  map<string, string> tags = 11;

  // An indicator span is one that represents an action that is included in a
  // service's Service Level Indicators (https://en.wikipedia.org/wiki/Service_level_indicator)
  // This is a signal to receivers that this span may be used to compute SLIs.
  // In practice a service's core feature — the thing you would "bill" for, such
  // as an API call or read/write operation — would be flagged as an indicator
  // span, and its child spans would further describe its duration.
  // It's also worth nothing that an indicator need not be the "root" or first
  // span in a trace. You might have various forms of middleware that happen
  // first or you might have multiple services participating in the same trace.
  bool indicator = 12;

  // What to call this span. This could take the form of the endpoint
  // (/customer/:id), the function (class::name.method), a friendly name
  // (foo middleware) or whatever makes sense in your context.
  string name = 13;
}

// A span collection allows clients to send a batch of spans rather than just one. Note that
// these spans may have nothing in common. This is merely a convenience to save clients — and
// servers — having to (un)marshal each span separately.
message SSFSpanCollection {
  repeated SSFSpan spans = 1;
}
