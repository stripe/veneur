// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ssf/sample.proto

package ssf

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SSFSample_Metric int32

const (
	SSFSample_COUNTER   SSFSample_Metric = 0
	SSFSample_GAUGE     SSFSample_Metric = 1
	SSFSample_HISTOGRAM SSFSample_Metric = 2
	SSFSample_SET       SSFSample_Metric = 3
	SSFSample_STATUS    SSFSample_Metric = 4
)

var SSFSample_Metric_name = map[int32]string{
	0: "COUNTER",
	1: "GAUGE",
	2: "HISTOGRAM",
	3: "SET",
	4: "STATUS",
}

var SSFSample_Metric_value = map[string]int32{
	"COUNTER":   0,
	"GAUGE":     1,
	"HISTOGRAM": 2,
	"SET":       3,
	"STATUS":    4,
}

func (x SSFSample_Metric) String() string {
	return proto.EnumName(SSFSample_Metric_name, int32(x))
}

func (SSFSample_Metric) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7ef0544ca34aff6f, []int{0, 0}
}

type SSFSample_Status int32

const (
	SSFSample_OK       SSFSample_Status = 0
	SSFSample_WARNING  SSFSample_Status = 1
	SSFSample_CRITICAL SSFSample_Status = 2
	SSFSample_UNKNOWN  SSFSample_Status = 3
)

var SSFSample_Status_name = map[int32]string{
	0: "OK",
	1: "WARNING",
	2: "CRITICAL",
	3: "UNKNOWN",
}

var SSFSample_Status_value = map[string]int32{
	"OK":       0,
	"WARNING":  1,
	"CRITICAL": 2,
	"UNKNOWN":  3,
}

func (x SSFSample_Status) String() string {
	return proto.EnumName(SSFSample_Status_name, int32(x))
}

func (SSFSample_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7ef0544ca34aff6f, []int{0, 1}
}

type SSFSample_Scope int32

const (
	SSFSample_DEFAULT SSFSample_Scope = 0
	SSFSample_LOCAL   SSFSample_Scope = 1
	SSFSample_GLOBAL  SSFSample_Scope = 2
)

var SSFSample_Scope_name = map[int32]string{
	0: "DEFAULT",
	1: "LOCAL",
	2: "GLOBAL",
}

var SSFSample_Scope_value = map[string]int32{
	"DEFAULT": 0,
	"LOCAL":   1,
	"GLOBAL":  2,
}

func (x SSFSample_Scope) String() string {
	return proto.EnumName(SSFSample_Scope_name, int32(x))
}

func (SSFSample_Scope) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7ef0544ca34aff6f, []int{0, 2}
}

// SSFSample is similar of a StatsD-style, point in time metric. It has a Metric
// type, a name, a value and a timestamp. Additionally it can contain a message,
// a status, a sample rate, a map of tags as string keys and values and a unit
// type. Note that SSF doesn't understand units, they are just strings!
type SSFSample struct {
	// The underlying type of the metric
	Metric SSFSample_Metric `protobuf:"varint,1,opt,name=metric,proto3,enum=ssf.SSFSample_Metric" json:"metric,omitempty"`
	// no spaces, but . is allowed
	// e.g.: veneur.bar.baz
	Name       string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value      float32           `protobuf:"fixed32,3,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp  int64             `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Message    string            `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	Status     SSFSample_Status  `protobuf:"varint,6,opt,name=status,proto3,enum=ssf.SSFSample_Status" json:"status,omitempty"`
	SampleRate float32           `protobuf:"fixed32,7,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	Tags       map[string]string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Unit       string            `protobuf:"bytes,9,opt,name=unit,proto3" json:"unit,omitempty"`
	// scope indicates to an SSF endpoint what it should do with a metric:
	//
	//     - DEFAULT (or absent) - aggregate counters and gauges locally,
	//       handle histograms and sets globally.
	//     - LOCAL - aggregate all metrics locally.
	//     - GLOBAL - aggregate all metrics globally.
	//
	Scope SSFSample_Scope `protobuf:"varint,10,opt,name=scope,proto3,enum=ssf.SSFSample_Scope" json:"scope,omitempty"`
}

func (m *SSFSample) Reset()         { *m = SSFSample{} }
func (m *SSFSample) String() string { return proto.CompactTextString(m) }
func (*SSFSample) ProtoMessage()    {}
func (*SSFSample) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef0544ca34aff6f, []int{0}
}
func (m *SSFSample) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SSFSample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SSFSample.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SSFSample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSFSample.Merge(m, src)
}
func (m *SSFSample) XXX_Size() int {
	return m.Size()
}
func (m *SSFSample) XXX_DiscardUnknown() {
	xxx_messageInfo_SSFSample.DiscardUnknown(m)
}

var xxx_messageInfo_SSFSample proto.InternalMessageInfo

func (m *SSFSample) GetMetric() SSFSample_Metric {
	if m != nil {
		return m.Metric
	}
	return SSFSample_COUNTER
}

func (m *SSFSample) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SSFSample) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SSFSample) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SSFSample) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SSFSample) GetStatus() SSFSample_Status {
	if m != nil {
		return m.Status
	}
	return SSFSample_OK
}

func (m *SSFSample) GetSampleRate() float32 {
	if m != nil {
		return m.SampleRate
	}
	return 0
}

func (m *SSFSample) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *SSFSample) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *SSFSample) GetScope() SSFSample_Scope {
	if m != nil {
		return m.Scope
	}
	return SSFSample_DEFAULT
}

// SSFSpan is the primary unit of reporting in SSF. It embeds a set of
// SSFSamples, as well as start/stop time stamps and a parent ID
// (which allows assembling a span lineage for distributed tracing
// purposes).
//
// Note that since this is protobuf, an SSFSpan does not *have* to
// include metrics, just as it does not *have* to include information
// necessary to reconstruct a trace.
//
// Compatibility
//
// On ingestion, an SSFSpan with an empty string for a name field but
// a tag "name" will have that name field replaced with the name tag,
// and the tag is removed.
//
// Metric SSFSamples with a zero sample_rate (indicating it was left
// out) have the sample_rate field set to 1 on ingestion.
//
// Validity Criteria
//
// Programs consuming SSFSpans should take care to only process spans
// and metrics that fulfill the following criteria:
//
// Metrics are considered valid if they have a name and a value.
//
// SSFSpans are considered valid trace spans if they have non-zero id,
// trace_id, start_timestamp and end_timestamp fields.
type SSFSpan struct {
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// the trace_id is the (span) id of the root span
	TraceId int64 `protobuf:"varint,2,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// the id for this span
	Id int64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	// the (span) id of the direct parent, if this span is not a root
	// span
	ParentId       int64 `protobuf:"varint,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	StartTimestamp int64 `protobuf:"varint,5,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	EndTimestamp   int64 `protobuf:"varint,6,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	// This flag being true signals that this span was an error. That definition
	// of error is not implicitly fatal, as a span may error but be fixed by
	// a subsequent retry, etc.
	Error bool `protobuf:"varint,7,opt,name=error,proto3" json:"error,omitempty"`
	// The name of the service
	// e.g. "veneur"
	Service string       `protobuf:"bytes,8,opt,name=service,proto3" json:"service,omitempty"`
	Metrics []*SSFSample `protobuf:"bytes,10,rep,name=metrics,proto3" json:"metrics,omitempty"`
	// Tags are name value pairs that describe a facet of the span. They apply to
	// the *entire* span as opposed to logs which apply to a specific time in
	// the span.
	Tags map[string]string `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// An indicator span is one that represents an action that is included in a
	// service's Service Level Indicators (https://en.wikipedia.org/wiki/Service_level_indicator)
	// This is a signal to receivers that this span may be used to compute SLIs.
	// In practice a service's core feature — the thing you would "bill" for, such
	// as an API call or read/write operation — would be flagged as an indicator
	// span, and its child spans would further describe its duration.
	// It's also worth nothing that an indicator need not be the "root" or first
	// span in a trace. You might have various forms of middleware that happen
	// first or you might have multiple services participating in the same trace.
	Indicator bool `protobuf:"varint,12,opt,name=indicator,proto3" json:"indicator,omitempty"`
	// What to call this span. This could take the form of the endpoint
	// (/customer/:id), the function (class::name.method), a friendly name
	// (foo middleware) or whatever makes sense in your context.
	Name string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// Root trace start time. This may be different than the span starting time.
	// This is especially useful for communicating with AWS X-Ray and have a consistent
	// TraceID.
	RootStartTimestamp int64 `protobuf:"varint,14,opt,name=root_start_timestamp,json=rootStartTimestamp,proto3" json:"root_start_timestamp,omitempty"`
}

func (m *SSFSpan) Reset()         { *m = SSFSpan{} }
func (m *SSFSpan) String() string { return proto.CompactTextString(m) }
func (*SSFSpan) ProtoMessage()    {}
func (*SSFSpan) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef0544ca34aff6f, []int{1}
}
func (m *SSFSpan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SSFSpan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SSFSpan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SSFSpan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSFSpan.Merge(m, src)
}
func (m *SSFSpan) XXX_Size() int {
	return m.Size()
}
func (m *SSFSpan) XXX_DiscardUnknown() {
	xxx_messageInfo_SSFSpan.DiscardUnknown(m)
}

var xxx_messageInfo_SSFSpan proto.InternalMessageInfo

func (m *SSFSpan) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *SSFSpan) GetTraceId() int64 {
	if m != nil {
		return m.TraceId
	}
	return 0
}

func (m *SSFSpan) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SSFSpan) GetParentId() int64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *SSFSpan) GetStartTimestamp() int64 {
	if m != nil {
		return m.StartTimestamp
	}
	return 0
}

func (m *SSFSpan) GetEndTimestamp() int64 {
	if m != nil {
		return m.EndTimestamp
	}
	return 0
}

func (m *SSFSpan) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func (m *SSFSpan) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *SSFSpan) GetMetrics() []*SSFSample {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *SSFSpan) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *SSFSpan) GetIndicator() bool {
	if m != nil {
		return m.Indicator
	}
	return false
}

func (m *SSFSpan) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SSFSpan) GetRootStartTimestamp() int64 {
	if m != nil {
		return m.RootStartTimestamp
	}
	return 0
}

func init() {
	proto.RegisterEnum("ssf.SSFSample_Metric", SSFSample_Metric_name, SSFSample_Metric_value)
	proto.RegisterEnum("ssf.SSFSample_Status", SSFSample_Status_name, SSFSample_Status_value)
	proto.RegisterEnum("ssf.SSFSample_Scope", SSFSample_Scope_name, SSFSample_Scope_value)
	proto.RegisterType((*SSFSample)(nil), "ssf.SSFSample")
	proto.RegisterMapType((map[string]string)(nil), "ssf.SSFSample.TagsEntry")
	proto.RegisterType((*SSFSpan)(nil), "ssf.SSFSpan")
	proto.RegisterMapType((map[string]string)(nil), "ssf.SSFSpan.TagsEntry")
}

func init() { proto.RegisterFile("ssf/sample.proto", fileDescriptor_7ef0544ca34aff6f) }

var fileDescriptor_7ef0544ca34aff6f = []byte{
	// 643 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0x6e, 0x92, 0x26, 0x4d, 0x5e, 0xb7, 0x12, 0x59, 0x05, 0x19, 0x98, 0x4a, 0x55, 0x0e, 0x54,
	0x03, 0x0a, 0x1a, 0x07, 0x26, 0x6e, 0xdd, 0xd6, 0x95, 0xb2, 0xae, 0x95, 0x9c, 0x54, 0x3b, 0x56,
	0xa6, 0xf1, 0xa6, 0x88, 0x35, 0x89, 0x6c, 0x6f, 0xd2, 0xfe, 0x05, 0x3f, 0x89, 0x23, 0xc7, 0x1d,
	0x39, 0xa2, 0xee, 0x8f, 0x20, 0xdb, 0x5d, 0xbb, 0x0d, 0x4e, 0xdc, 0xfc, 0xde, 0xf7, 0xf5, 0xe5,
	0x7d, 0x9f, 0x3f, 0x17, 0x42, 0x21, 0x4e, 0xdf, 0x09, 0x3a, 0x2f, 0xce, 0x59, 0xa7, 0xe0, 0xb9,
	0xcc, 0x91, 0x23, 0xc4, 0x69, 0xeb, 0x47, 0x19, 0x82, 0x28, 0x3a, 0x8c, 0x34, 0x80, 0xde, 0x82,
	0x37, 0x67, 0x92, 0xa7, 0x33, 0x6c, 0x35, 0xad, 0x76, 0x6d, 0xe7, 0x71, 0x47, 0x88, 0xd3, 0xce,
	0x0a, 0xef, 0x1c, 0x6b, 0x90, 0x2c, 0x49, 0x08, 0x41, 0x39, 0xa3, 0x73, 0x86, 0xed, 0xa6, 0xd5,
	0x0e, 0x88, 0x3e, 0xa3, 0x3a, 0xb8, 0x97, 0xf4, 0xfc, 0x82, 0x61, 0xa7, 0x69, 0xb5, 0x6d, 0x62,
	0x0a, 0xb4, 0x05, 0x81, 0x4c, 0xe7, 0x4c, 0x48, 0x3a, 0x2f, 0x70, 0xb9, 0x69, 0xb5, 0x1d, 0xb2,
	0x6e, 0x20, 0x0c, 0x95, 0x39, 0x13, 0x82, 0x9e, 0x31, 0xec, 0xea, 0x51, 0xb7, 0xa5, 0x5a, 0x48,
	0x48, 0x2a, 0x2f, 0x04, 0xf6, 0xfe, 0xb9, 0x50, 0xa4, 0x41, 0xb2, 0x24, 0xa1, 0x17, 0x50, 0x35,
	0x12, 0xa7, 0x9c, 0x4a, 0x86, 0x2b, 0x7a, 0x05, 0x30, 0x2d, 0x42, 0x25, 0x43, 0x6f, 0xa0, 0x2c,
	0xe9, 0x99, 0xc0, 0x7e, 0xd3, 0x69, 0x57, 0x77, 0xf0, 0x83, 0x69, 0x31, 0x3d, 0x13, 0xbd, 0x4c,
	0xf2, 0x2b, 0xa2, 0x59, 0x4a, 0xdf, 0x45, 0x96, 0x4a, 0x1c, 0x18, 0x7d, 0xea, 0x8c, 0xb6, 0xc1,
	0x15, 0xb3, 0xbc, 0x60, 0x18, 0xf4, 0x42, 0xf5, 0x87, 0x0b, 0x29, 0x8c, 0x18, 0xca, 0xb3, 0x8f,
	0x10, 0xac, 0x46, 0xa2, 0x10, 0x9c, 0x6f, 0xec, 0x4a, 0x1b, 0x1b, 0x10, 0x75, 0x5c, 0x5b, 0x65,
	0xfc, 0x33, 0xc5, 0x27, 0x7b, 0xd7, 0x6a, 0x1d, 0x80, 0x67, 0xac, 0x46, 0x55, 0xa8, 0xec, 0x8f,
	0x27, 0xa3, 0xb8, 0x47, 0xc2, 0x12, 0x0a, 0xc0, 0xed, 0x77, 0x27, 0xfd, 0x5e, 0x68, 0xa1, 0x4d,
	0x08, 0x3e, 0x0f, 0xa2, 0x78, 0xdc, 0x27, 0xdd, 0xe3, 0xd0, 0x46, 0x15, 0x70, 0xa2, 0x5e, 0x1c,
	0x3a, 0x08, 0xc0, 0x8b, 0xe2, 0x6e, 0x3c, 0x89, 0xc2, 0x72, 0x6b, 0x17, 0x3c, 0xe3, 0x0f, 0xf2,
	0xc0, 0x1e, 0x1f, 0x85, 0x25, 0x35, 0xed, 0xa4, 0x4b, 0x46, 0x83, 0x51, 0x3f, 0xb4, 0xd0, 0x06,
	0xf8, 0xfb, 0x64, 0x10, 0x0f, 0xf6, 0xbb, 0xc3, 0xd0, 0x56, 0xd0, 0x64, 0x74, 0x34, 0x1a, 0x9f,
	0x8c, 0x42, 0xa7, 0xf5, 0x1a, 0x5c, 0x2d, 0x44, 0x75, 0x0f, 0x7a, 0x87, 0xdd, 0xc9, 0x30, 0x36,
	0x9f, 0x1f, 0x8e, 0x15, 0xdb, 0x52, 0x9f, 0xe9, 0x0f, 0xc7, 0x7b, 0xea, 0x97, 0xad, 0x85, 0x03,
	0x15, 0x65, 0x40, 0x41, 0x33, 0x75, 0x93, 0x97, 0x8c, 0x8b, 0x34, 0xcf, 0xb4, 0x50, 0x97, 0xdc,
	0x96, 0xe8, 0x29, 0xf8, 0x92, 0xd3, 0x19, 0x9b, 0xa6, 0x89, 0xd6, 0xeb, 0x90, 0x8a, 0xae, 0x07,
	0x09, 0xaa, 0x81, 0x9d, 0x26, 0x3a, 0x2f, 0x0e, 0xb1, 0xd3, 0x04, 0x3d, 0x87, 0xa0, 0xa0, 0x9c,
	0x65, 0x52, 0x71, 0x4d, 0x58, 0x7c, 0xd3, 0x18, 0x24, 0xe8, 0x15, 0x3c, 0x12, 0x92, 0x72, 0x39,
	0x5d, 0xe7, 0xc9, 0xd5, 0x94, 0x9a, 0x6e, 0xc7, 0xab, 0x50, 0xbd, 0x84, 0x4d, 0x96, 0x25, 0x77,
	0x68, 0x9e, 0xa6, 0x6d, 0xb0, 0x2c, 0x59, 0x93, 0xea, 0xe0, 0x32, 0xce, 0x73, 0xae, 0xa3, 0xe2,
	0x13, 0x53, 0x28, 0x15, 0x82, 0xf1, 0xcb, 0x74, 0xc6, 0xb0, 0x6f, 0xf2, 0xb8, 0x2c, 0x51, 0x5b,
	0x25, 0x55, 0x5d, 0x8c, 0xc0, 0xa0, 0x23, 0x54, 0xbb, 0x7f, 0xff, 0xe4, 0x16, 0x46, 0xdb, 0xcb,
	0xa4, 0x55, 0x35, 0xed, 0xc9, 0x8a, 0x56, 0xd0, 0xec, 0xaf, 0x9c, 0x6d, 0x41, 0x90, 0x66, 0x49,
	0x3a, 0xa3, 0x32, 0xe7, 0x78, 0x43, 0x6f, 0xb2, 0x6e, 0xac, 0x5e, 0xd9, 0xe6, 0x9d, 0x57, 0xf6,
	0x1e, 0xea, 0x3c, 0xcf, 0xe5, 0xf4, 0xa1, 0x15, 0x35, 0xad, 0x11, 0x29, 0x2c, 0xba, 0x67, 0xc7,
	0x7f, 0x67, 0xf1, 0x4b, 0xd9, 0x0f, 0x42, 0xd8, 0xc3, 0x3f, 0x17, 0x0d, 0xeb, 0x7a, 0xd1, 0xb0,
	0x7e, 0x2f, 0x1a, 0xd6, 0xf7, 0x9b, 0x46, 0xe9, 0xfa, 0xa6, 0x51, 0xfa, 0x75, 0xd3, 0x28, 0x7d,
	0xf5, 0xf4, 0xbf, 0xc9, 0x87, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xff, 0x77, 0x3c, 0x85, 0x61,
	0x04, 0x00, 0x00,
}

func (m *SSFSample) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSFSample) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metric != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.Metric))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSample(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Value != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Value))))
		i += 4
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.Timestamp))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSample(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Status != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.Status))
	}
	if m.SampleRate != 0 {
		dAtA[i] = 0x3d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SampleRate))))
		i += 4
	}
	if len(m.Tags) > 0 {
		for k, _ := range m.Tags {
			dAtA[i] = 0x42
			i++
			v := m.Tags[k]
			mapSize := 1 + len(k) + sovSample(uint64(len(k))) + 1 + len(v) + sovSample(uint64(len(v)))
			i = encodeVarintSample(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSample(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintSample(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Unit) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSample(dAtA, i, uint64(len(m.Unit)))
		i += copy(dAtA[i:], m.Unit)
	}
	if m.Scope != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.Scope))
	}
	return i, nil
}

func (m *SSFSpan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSFSpan) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.Version))
	}
	if m.TraceId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.TraceId))
	}
	if m.Id != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.Id))
	}
	if m.ParentId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.ParentId))
	}
	if m.StartTimestamp != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.StartTimestamp))
	}
	if m.EndTimestamp != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.EndTimestamp))
	}
	if m.Error {
		dAtA[i] = 0x38
		i++
		if m.Error {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Service) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSample(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	if len(m.Metrics) > 0 {
		for _, msg := range m.Metrics {
			dAtA[i] = 0x52
			i++
			i = encodeVarintSample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Tags) > 0 {
		for k, _ := range m.Tags {
			dAtA[i] = 0x5a
			i++
			v := m.Tags[k]
			mapSize := 1 + len(k) + sovSample(uint64(len(k))) + 1 + len(v) + sovSample(uint64(len(v)))
			i = encodeVarintSample(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSample(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintSample(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Indicator {
		dAtA[i] = 0x60
		i++
		if m.Indicator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintSample(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.RootStartTimestamp != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.RootStartTimestamp))
	}
	return i, nil
}

func encodeVarintSample(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SSFSample) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metric != 0 {
		n += 1 + sovSample(uint64(m.Metric))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	if m.Value != 0 {
		n += 5
	}
	if m.Timestamp != 0 {
		n += 1 + sovSample(uint64(m.Timestamp))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovSample(uint64(m.Status))
	}
	if m.SampleRate != 0 {
		n += 5
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSample(uint64(len(k))) + 1 + len(v) + sovSample(uint64(len(v)))
			n += mapEntrySize + 1 + sovSample(uint64(mapEntrySize))
		}
	}
	l = len(m.Unit)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	if m.Scope != 0 {
		n += 1 + sovSample(uint64(m.Scope))
	}
	return n
}

func (m *SSFSpan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovSample(uint64(m.Version))
	}
	if m.TraceId != 0 {
		n += 1 + sovSample(uint64(m.TraceId))
	}
	if m.Id != 0 {
		n += 1 + sovSample(uint64(m.Id))
	}
	if m.ParentId != 0 {
		n += 1 + sovSample(uint64(m.ParentId))
	}
	if m.StartTimestamp != 0 {
		n += 1 + sovSample(uint64(m.StartTimestamp))
	}
	if m.EndTimestamp != 0 {
		n += 1 + sovSample(uint64(m.EndTimestamp))
	}
	if m.Error {
		n += 2
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.Size()
			n += 1 + l + sovSample(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSample(uint64(len(k))) + 1 + len(v) + sovSample(uint64(len(v)))
			n += mapEntrySize + 1 + sovSample(uint64(mapEntrySize))
		}
	}
	if m.Indicator {
		n += 2
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	if m.RootStartTimestamp != 0 {
		n += 1 + sovSample(uint64(m.RootStartTimestamp))
	}
	return n
}

func sovSample(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSample(x uint64) (n int) {
	return sovSample(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SSFSample) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSFSample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSFSample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			m.Metric = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Metric |= SSFSample_Metric(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SSFSample_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SampleRate = float32(math.Float32frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSample
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSample
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSample
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSample
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSample
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthSample
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthSample
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSample(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSample
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			m.Scope = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scope |= SSFSample_Scope(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSFSpan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSFSpan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSFSpan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			m.TraceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TraceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimestamp", wireType)
			}
			m.StartTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			m.EndTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, &SSFSample{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSample
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSample
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSample
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSample
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSample
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthSample
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthSample
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSample(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSample
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indicator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Indicator = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootStartTimestamp", wireType)
			}
			m.RootStartTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RootStartTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSample(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSample
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSample
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSample
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSample
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSample(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSample
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSample = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSample   = fmt.Errorf("proto: integer overflow")
)
