// Code generated by protoc-gen-go.
// source: ssf/sample.proto
// DO NOT EDIT!

/*
Package ssf is a generated protocol buffer package.

It is generated from these files:
	ssf/sample.proto

It has these top-level messages:
	SSFTag
	SSFSample
	SSFSpan
*/
package ssf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SSFSample_Metric int32

const (
	SSFSample_COUNTER   SSFSample_Metric = 0
	SSFSample_GAUGE     SSFSample_Metric = 1
	SSFSample_HISTOGRAM SSFSample_Metric = 2
	SSFSample_SET       SSFSample_Metric = 3
	SSFSample_STATUS    SSFSample_Metric = 4
)

var SSFSample_Metric_name = map[int32]string{
	0: "COUNTER",
	1: "GAUGE",
	2: "HISTOGRAM",
	3: "SET",
	4: "STATUS",
}
var SSFSample_Metric_value = map[string]int32{
	"COUNTER":   0,
	"GAUGE":     1,
	"HISTOGRAM": 2,
	"SET":       3,
	"STATUS":    4,
}

func (x SSFSample_Metric) String() string {
	return proto.EnumName(SSFSample_Metric_name, int32(x))
}
func (SSFSample_Metric) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type SSFSample_Status int32

const (
	SSFSample_OK       SSFSample_Status = 0
	SSFSample_WARNING  SSFSample_Status = 1
	SSFSample_CRITICAL SSFSample_Status = 2
	SSFSample_UNKNOWN  SSFSample_Status = 3
)

var SSFSample_Status_name = map[int32]string{
	0: "OK",
	1: "WARNING",
	2: "CRITICAL",
	3: "UNKNOWN",
}
var SSFSample_Status_value = map[string]int32{
	"OK":       0,
	"WARNING":  1,
	"CRITICAL": 2,
	"UNKNOWN":  3,
}

func (x SSFSample_Status) String() string {
	return proto.EnumName(SSFSample_Status_name, int32(x))
}
func (SSFSample_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

type SSFTag struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *SSFTag) Reset()                    { *m = SSFTag{} }
func (m *SSFTag) String() string            { return proto.CompactTextString(m) }
func (*SSFTag) ProtoMessage()               {}
func (*SSFTag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SSFSample struct {
	// The underlying type of the metric
	Metric SSFSample_Metric `protobuf:"varint,1,opt,name=metric,enum=ssf.SSFSample_Metric" json:"metric,omitempty"`
	// no spaces, but . is allowed
	// e.g.: veneur.bar.baz
	Name       string           `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Value      float32          `protobuf:"fixed32,3,opt,name=value" json:"value,omitempty"`
	Timestamp  int64            `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Message    string           `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
	Status     SSFSample_Status `protobuf:"varint,6,opt,name=status,enum=ssf.SSFSample_Status" json:"status,omitempty"`
	SampleRate float32          `protobuf:"fixed32,7,opt,name=sample_rate,json=sampleRate" json:"sample_rate,omitempty"`
	Tags       []*SSFTag        `protobuf:"bytes,8,rep,name=tags" json:"tags,omitempty"`
	Unit       string           `protobuf:"bytes,9,opt,name=unit" json:"unit,omitempty"`
}

func (m *SSFSample) Reset()                    { *m = SSFSample{} }
func (m *SSFSample) String() string            { return proto.CompactTextString(m) }
func (*SSFSample) ProtoMessage()               {}
func (*SSFSample) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SSFSample) GetTags() []*SSFTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type SSFSpan struct {
	Version int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	// the trace_id is the (span) id of the root span
	TraceId int64 `protobuf:"varint,2,opt,name=trace_id,json=traceId" json:"trace_id,omitempty"`
	// the id for this span
	Id int64 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	// the (span) id of the direct parent,
	// if this span is not a root span
	ParentId       int64 `protobuf:"varint,4,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	StartTimestamp int64 `protobuf:"varint,5,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	EndTimestamp   int64 `protobuf:"varint,6,opt,name=end_timestamp,json=endTimestamp" json:"end_timestamp,omitempty"`
	Error          bool  `protobuf:"varint,7,opt,name=error" json:"error,omitempty"`
	// The name of the service
	// e.g. "veneur"
	Service string `protobuf:"bytes,8,opt,name=service" json:"service,omitempty"`
	// The thing we're doing, handing a request, writing a value, etc
	Operation string       `protobuf:"bytes,9,opt,name=operation" json:"operation,omitempty"`
	Metrics   []*SSFSample `protobuf:"bytes,10,rep,name=metrics" json:"metrics,omitempty"`
	Tags      []*SSFTag    `protobuf:"bytes,11,rep,name=tags" json:"tags,omitempty"`
}

func (m *SSFSpan) Reset()                    { *m = SSFSpan{} }
func (m *SSFSpan) String() string            { return proto.CompactTextString(m) }
func (*SSFSpan) ProtoMessage()               {}
func (*SSFSpan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SSFSpan) GetMetrics() []*SSFSample {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *SSFSpan) GetTags() []*SSFTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func init() {
	proto.RegisterType((*SSFTag)(nil), "ssf.SSFTag")
	proto.RegisterType((*SSFSample)(nil), "ssf.SSFSample")
	proto.RegisterType((*SSFSpan)(nil), "ssf.SSFSpan")
	proto.RegisterEnum("ssf.SSFSample_Metric", SSFSample_Metric_name, SSFSample_Metric_value)
	proto.RegisterEnum("ssf.SSFSample_Status", SSFSample_Status_name, SSFSample_Status_value)
}

func init() { proto.RegisterFile("ssf/sample.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 504 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x93, 0xcd, 0x8a, 0xdb, 0x30,
	0x10, 0xc7, 0xd7, 0x76, 0xfc, 0x35, 0xd9, 0x4d, 0xcd, 0xb0, 0x05, 0x95, 0x16, 0x36, 0xa4, 0x87,
	0xe6, 0xd2, 0x14, 0xd2, 0x4b, 0xaf, 0x21, 0xcd, 0xa6, 0x66, 0xbb, 0x0e, 0xc8, 0x0e, 0x7b, 0x0c,
	0x6a, 0xac, 0x04, 0xc3, 0xda, 0x31, 0x92, 0x92, 0xf7, 0xe9, 0x2b, 0xf5, 0x89, 0x8a, 0xa4, 0x7c,
	0xb4, 0xb0, 0x7b, 0xd3, 0xcc, 0xfc, 0x3d, 0x9a, 0xbf, 0x7e, 0x63, 0x48, 0xa4, 0xdc, 0x7c, 0x91,
	0xac, 0x6e, 0x9f, 0xf9, 0xa8, 0x15, 0x3b, 0xb5, 0x43, 0x4f, 0xca, 0xcd, 0x60, 0x0c, 0x41, 0x9e,
	0xdf, 0x17, 0x6c, 0x8b, 0x08, 0x9d, 0x86, 0xd5, 0x9c, 0x38, 0x7d, 0x67, 0x18, 0x53, 0x73, 0xc6,
	0x5b, 0xf0, 0x0f, 0xec, 0x79, 0xcf, 0x89, 0x6b, 0x92, 0x36, 0x18, 0xfc, 0xf6, 0x20, 0xce, 0xf3,
	0xfb, 0xdc, 0x34, 0xc3, 0xcf, 0x10, 0xd4, 0x5c, 0x89, 0x6a, 0x6d, 0xbe, 0xec, 0x8d, 0xdf, 0x8e,
	0xa4, 0xdc, 0x8c, 0xce, 0xf5, 0xd1, 0xa3, 0x29, 0xd2, 0xa3, 0xe8, 0x7c, 0x8d, 0xfb, 0xd2, 0x35,
	0x5e, 0xdf, 0x19, 0xba, 0xc7, 0x6b, 0xf0, 0x03, 0xc4, 0xaa, 0xaa, 0xb9, 0x54, 0xac, 0x6e, 0x49,
	0xa7, 0xef, 0x0c, 0x3d, 0x7a, 0x49, 0x20, 0x81, 0xb0, 0xe6, 0x52, 0xb2, 0x2d, 0x27, 0xbe, 0x69,
	0x75, 0x0a, 0xf5, 0x40, 0x52, 0x31, 0xb5, 0x97, 0x24, 0x78, 0x71, 0xa0, 0xdc, 0x14, 0xe9, 0x51,
	0x84, 0x77, 0xd0, 0xb5, 0xcf, 0xb2, 0x12, 0x4c, 0x71, 0x12, 0x9a, 0x11, 0xc0, 0xa6, 0x28, 0x53,
	0x1c, 0xef, 0xa0, 0xa3, 0xd8, 0x56, 0x92, 0xa8, 0xef, 0x0d, 0xbb, 0xe3, 0xee, 0xa9, 0x5b, 0xc1,
	0xb6, 0xd4, 0x14, 0xb4, 0xa5, 0x7d, 0x53, 0x29, 0x12, 0x5b, 0x4b, 0xfa, 0x3c, 0xf8, 0x0e, 0x81,
	0x35, 0x8e, 0x5d, 0x08, 0xa7, 0x8b, 0x65, 0x56, 0xcc, 0x68, 0x72, 0x85, 0x31, 0xf8, 0xf3, 0xc9,
	0x72, 0x3e, 0x4b, 0x1c, 0xbc, 0x81, 0xf8, 0x47, 0x9a, 0x17, 0x8b, 0x39, 0x9d, 0x3c, 0x26, 0x2e,
	0x86, 0xe0, 0xe5, 0xb3, 0x22, 0xf1, 0x10, 0x20, 0xc8, 0x8b, 0x49, 0xb1, 0xcc, 0x93, 0xce, 0xe0,
	0x1b, 0x04, 0x76, 0x5a, 0x0c, 0xc0, 0x5d, 0x3c, 0x24, 0x57, 0xba, 0xdb, 0xd3, 0x84, 0x66, 0x69,
	0x36, 0x4f, 0x1c, 0xbc, 0x86, 0x68, 0x4a, 0xd3, 0x22, 0x9d, 0x4e, 0x7e, 0x26, 0xae, 0x2e, 0x2d,
	0xb3, 0x87, 0x6c, 0xf1, 0x94, 0x25, 0xde, 0xe0, 0x8f, 0x0b, 0xa1, 0xb6, 0xdc, 0xb2, 0x46, 0x3f,
	0xd5, 0x81, 0x0b, 0x59, 0xed, 0x1a, 0x83, 0xc8, 0xa7, 0xa7, 0x10, 0xdf, 0x41, 0xa4, 0x04, 0x5b,
	0xf3, 0x55, 0x55, 0x1a, 0x20, 0x1e, 0x0d, 0x4d, 0x9c, 0x96, 0xd8, 0x03, 0xb7, 0x2a, 0x0d, 0x10,
	0x8f, 0xba, 0x55, 0x89, 0xef, 0x21, 0x6e, 0x99, 0xe0, 0x8d, 0xd2, 0x5a, 0x4b, 0x23, 0xb2, 0x89,
	0xb4, 0xc4, 0x4f, 0xf0, 0x46, 0x2a, 0x26, 0xd4, 0xea, 0x02, 0xcc, 0x37, 0x92, 0x9e, 0x49, 0x17,
	0x67, 0x6a, 0x1f, 0xe1, 0x86, 0x37, 0xe5, 0x3f, 0xb2, 0xc0, 0xc8, 0xae, 0x79, 0x53, 0x5e, 0x44,
	0xb7, 0xe0, 0x73, 0x21, 0x76, 0xc2, 0xb0, 0x88, 0xa8, 0x0d, 0xb4, 0x0b, 0xc9, 0xc5, 0xa1, 0x5a,
	0x73, 0x12, 0x59, 0xe0, 0xc7, 0x50, 0x2f, 0xca, 0xae, 0xe5, 0x82, 0x29, 0xed, 0xd0, 0x42, 0xb8,
	0x24, 0x70, 0xa8, 0x17, 0x45, 0x93, 0x90, 0x04, 0x0c, 0xc1, 0xde, 0xff, 0xfb, 0x40, 0x4f, 0xe5,
	0x33, 0xe8, 0xee, 0x2b, 0xa0, 0x7f, 0x05, 0xe6, 0xc7, 0xf9, 0xfa, 0x37, 0x00, 0x00, 0xff, 0xff,
	0x45, 0xbd, 0x18, 0x20, 0x4c, 0x03, 0x00, 0x00,
}
