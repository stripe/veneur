// Code generated by MockGen. DO NOT EDIT.
// Source: proxy/destinations/destinations.go

// Package destinations is a generated GoMock package.
package destinations

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	connect "github.com/stripe/veneur/v14/proxy/connect"
)

// MockDestinations is a mock of Destinations interface.
type MockDestinations struct {
	ctrl     *gomock.Controller
	recorder *MockDestinationsMockRecorder
}

// MockDestinationsMockRecorder is the mock recorder for MockDestinations.
type MockDestinationsMockRecorder struct {
	mock *MockDestinations
}

// NewMockDestinations creates a new mock instance.
func NewMockDestinations(ctrl *gomock.Controller) *MockDestinations {
	mock := &MockDestinations{ctrl: ctrl}
	mock.recorder = &MockDestinationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDestinations) EXPECT() *MockDestinationsMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockDestinations) Add(ctx context.Context, destinations []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", ctx, destinations)
}

// Add indicates an expected call of Add.
func (mr *MockDestinationsMockRecorder) Add(ctx, destinations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockDestinations)(nil).Add), ctx, destinations)
}

// Clear mocks base method.
func (m *MockDestinations) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockDestinationsMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockDestinations)(nil).Clear))
}

// Get mocks base method.
func (m *MockDestinations) Get(key string) (connect.Destination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(connect.Destination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDestinationsMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDestinations)(nil).Get), key)
}

// Size mocks base method.
func (m *MockDestinations) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockDestinationsMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockDestinations)(nil).Size))
}

// Wait mocks base method.
func (m *MockDestinations) Wait() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Wait")
}

// Wait indicates an expected call of Wait.
func (mr *MockDestinationsMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockDestinations)(nil).Wait))
}
