---
# == COLLECTION ==

# The addresses on which to listen for statsd metrics. These are
# formatted as URLs, with schemes corresponding to valid "network"
# arguments on https://golang.org/pkg/net/#Listen. Currently, only udp,
# tcp(including IPv4 and 6-only) and unixgram(datagram only) schemes are
# supported. This option supersedes the "udp_address" and "tcp_address" options.
statsd_listen_addresses:
 - udp://localhost:8126
 - tcp://localhost:8126
 - unixgram:///tmp/veneur-statsd.sock
 - unixgram:@veneur-statsd.sock

# The addresses on which to listen for SSF data. As with
# statsd_listen_addresses, these are formatted as URLs, with schemes
# corresponding to valid "network" arguments on
# https://golang.org/pkg/net/#Listen. Currently, only UDP and Unix
# domain sockets are supported.
# Note: SSF sockets are required to ingest trace data.
# This option supersedes the "ssf_address" option.
ssf_listen_addresses:
  - udp://localhost:8128
  - unix:///tmp/veneur-ssf.sock
  - unix:@veneur-ssf.sock

# The addresses on which to listen for GRPC encoded SSF or dogstatsd data. As with
# statsd_listen_addresses, these are formatted as URLs, with schemes
# corresponding to valid "network" arguments on
# https://golang.org/pkg/net/#Listen. Only TCP addresses are supported.
# This option can be used in conjunction with ssf_listen_addresses and statsd_listen_addresses.
# Each address listed here can support both SSF and dogstatsd on the same address and same port (the wonders of gRPC).
grpc_listen_addresses:
 - tcp://localhost:8181

# TLS
# These are only useful in conjunction with TCP listening sockets

# TLS server private key and certificate for encryption (specify both)
# These are the key/certificate contents, not a file path
tls_key: ""
tls_certificate: ""

# Authority certificate: requires clients to be authenticated
tls_authority_certificate: ""

# == BEHAVIOR ==

# Use a static host for forwarding
#forward_address: "http://veneur.example.com"
# Do not add a prefix when setting the forward address for gRPC.
#forward_address: "veneur.example.com"
forward_address: ""

# How often to flush. When flushing to Datadog, changing this
# value when you've already emitted metrics will break your time
# series data.
interval: "10s"

# How many flushes veneur may miss before it considers itself buggy
# and terminates. Leaving this at the default of 0 disables the
# watchdog.
flush_watchdog_missed_flushes: 0

# Whether to flush sinks on shutdown. Defaults to false
flush_on_shutdown: false

# Veneur can "sychronize" it's flushes with the system clock, flushing at even
# intervals i.e. 0, 10, 20â€¦ to align with the `interval`. This is disabled by
# default for now, as it can cause thundering herds in large installations.
synchronize_with_interval: false

# Veneur emits its own metrics; this configures where we send them. It's ok
# to point veneur at itself for metrics consumption!
# This can be host:port combination or a Unix Domain Socket(eg: unix:///tmp/veneur-statsd.sock)
stats_address: "localhost:8126"

# The address on which to listen for HTTP imports and/or healthchecks.
# http_address: "einhorn@0"
http_address: "0.0.0.0:8127"

# The address on which to listen for imports over gRPC.
grpc_address: "0.0.0.0:8128"

# The name of timer metrics that "indicator" spans should be tracked
# under. If this is unset, veneur doesn't report an additional timer
# metric for indicator spans.
indicator_span_timer_name: "indicator_span.duration_ns"

# The name of timer metrics that objectives, derived from indicator
# spans, should be tracked under. If this is unset, veneur doesn't
# report an additional timer metric for indicator spans.
objective_span_timer_name: "objective_span.duration_ns"

# If enabled, issuing an unathenticated HTTP POST request to /quitquitquit
# will gracefully shut down the server.
# This is intended to be used in environments where network access is already
# restricted, such as inside containerized deployments.
http_quit: false

# == METRICS CONFIGURATION ==

# Defaults to the os.Hostname()!
hostname: ""

# If true and hostname is "" or absent, don't add the host tag
omit_empty_hostname: false

# Tags supplied here will be added to all metrics and spans when flushing
# to vendor sinks. They will not be forwarded to global Veneur instances.
# tags:
#  - "foo:bar"
#  - "baz:quz"
tags:
  - ""

# Tags suppliedhere will be added to all metrics and spans at parse/ingestion
# time. They *will* be forwarded to global Veneur instances.
# extend_tags:
#  - "foo:bar"
#  - "baz:quz"
extend_tags:
  - ""

# Tags listed here will be excluded from sinks. A pipe ("|") delimiter
# can be used to specify the name of a sink, in which case the tag will
# only be excluded from that one sink.
# Sinks must support this behavior by providing a SetExcludedTags method,
# or the exclusion rule will not be applied.
tags_exclude:
  - "nonce"
  - "host_env|signalfx"

# Set to floating point values that you'd like to output percentiles for from
# histograms.
percentiles:
  - 0.5
  - 0.75
  - 0.99

# Aggregations you'd like to output for histograms. Possible values can be any
# or all of:
# - `min`: the minimum value in the histogram during the flush period
# - `max`: the maximum value in the histogram during the flush period
# - `median`: the median value in the histogram during the flush period
# - `avg`: the average value in the histogram during the flush period
# - `count`: the number of values added to the histogram during the flush period
# - `sum`: the sum of all values added to the histogram during the flush period
# - `hmean`: the harmonic mean of the all the values added to the histogram during the flush period
aggregates:
 - "min"
 - "max"
 - "count"

# Metrics that Veneur reports about its own operation. Each of the
# entries here can have the value "global", "local", "default" and ""
# ("default" and "" mean the same thing). Setting
# this to any value other than the default will make all metrics
# of that type have the following behavior:
#
#  - "default"/"": scope remains unchanged
#  - "global": scope for "default"-scoped metrics of that type will be
#    changed to global, so they get forwarded to a global veneur node.
#  - "local": scope for "default"-scoped metrics of that type will be
#    changed to local, so they get reported from the local veneur node
#    only.
#
# When this is unset in configuration, the default values for all
# metric types are "", indicating that veneur will use the default
# scope for each of the metrics it reports.
veneur_metrics_scopes:
  counter: local

  # changing the setting for "gauge" to "global" is not recommended,
  # as the global aggregation method for gauges is "last write wins".
  gauge: local

  histogram: global

  set: global

  status: local


# Tags supplied here will be attached to all metrics that veneur
# reports about its own operation.
veneur_metrics_additional_tags:
  - "veneur_internal_metric:true"

count_unique_timeseries: false

# == PERFORMANCE ==

# Adjusts the number of metrics workers across which Veneur will
# distribute aggregation.  More decreases contention but has
# diminishing returns. The default value is 1, no parallel ingestion
# of metrics.
num_workers: 96

# Adjusts the number of listening goroutines on any UDP listener
# (statsd and SSF). Numbers larger than 1 will enable the use of
# SO_REUSEPORT, so make sure this is supported on your platform!
num_readers: 1

# Adjusts the number of span workers across which Veneur will
# distribute span ingestion. The default value is 1, no parallel
# ingestion of spans.
num_span_workers: 10

# Adjusts the number of spans that can be accomodated before the span
# ingestion buffer blocks. This is good to tweak when you're seeing
# spiky span ingestion patterns and a lot of spans get dropped. This
# corresponds directly to a Go channel's capacity, for which the
# default is zero (unbuffered).
span_channel_capacity: 100

# == LIMITS ==

# How big of a buffer to allocate for incoming metrics. Metrics longer than this
# will be truncated!
metric_max_length: 4096

# How big of a buffer to allocate for incoming traces.
trace_max_length_bytes: 16384

# The size of the buffer we'll use to buffer socket reads. Tune this if you
# you think Veneur needs more room to keep up with all packets.
read_buffer_size_bytes: 2097152

# == DIAGNOSTICS ==

# Sets the log level to DEBUG
debug: false

# runtime.SetMutexProfileFraction
# The fraction of mutex contention events that are reported in the mutex profile.
# On average, 1/n events are reported, so higher numbers will sample fewer events.
# Default (0) disables mutex profiling altogether.
mutex_profile_fraction: 0

# runtime.SetBlockProfileRate.
# The fraction of goroutine blocking events that are reported in the blocking profile.
# On average, one blocking event will be sampled for every N nanoseconds spent blocked.
# Default (0) disables block profiling altogether.
block_profile_rate: 0

# Providing a Sentry DSN here will send internal exceptions to Sentry
sentry_dsn: ""

# Enables Go profiling
enable_profiling: false
